---
// https://cosmicthemes.com/blog/astro-table-of-contents-component/#creating-the-table-of-contents-component

import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
  levels?: number;
}

const { headings, levels = 2 } = Astro.props;

// Filter headings to only show up to the specified level
const filteredHeadings = headings.filter((heading) => heading.depth <= levels);
---

<div class="rounded-sm border border-base-400 p-3 text-sm leading-tight">
  <h4 class="text-xl font-medium">Table of Contents</h4>
  <ul class="mt-4 flex flex-col gap-2">
    {
      filteredHeadings.map((heading) => (
        <li
          class:list={{
            "pl-3": heading.depth === 2,
            "pl-6": heading.depth === 3,
          }}
        >
          <a
            href={`#${heading.slug}`}
            class="toc-link transition hover:text-blue-600"
          >
            {heading.text}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script>
  // Wrapper for Blog post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: NodeListOf<Element>;

  // Function that runs when the Intersection Observer fires
  function setCurrent(e: IntersectionObserverEntry[]) {
    var allSectionLinks = document.querySelectorAll(".toc-link");
    e.map((i) => {
      if (i.isIntersecting === true) {
        allSectionLinks.forEach((link) =>
          link.classList.remove("text-blue-600")
        );
        const targetLink = document.querySelector(
          `a[href="#${i.target.id}"].toc-link`
        );

        if (targetLink) targetLink.classList.add("text-blue-600");
      }
    });
  }

  function initTOC() {
    // update this with whatever class wraps your blog post content
    wrappingElement = document.querySelector(".prose");
    if (wrappingElement !== null) {
      // Get all H1/H2/H3 tags from the post
      allHeaderTags = wrappingElement.querySelectorAll(
        ":scope > h1, :scope > h2, :scope > h3"
      );
    }

    // Intersection Observer Options
    let options: IntersectionObserverInit = {
      root: null,
      rootMargin: "0px 0px -50% 0px",
      threshold: [1],
    };

    // Each Intersection Observer runs setCurrent
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    if (wrappingElement === null) {
      return;
    }
    allHeaderTags.forEach((tag) => {
      // add scroll margin top to account for fixed navbar
      tag.classList.add("scroll-mt-24");
      observeHeaderTags.observe(tag);
    });
  }

  // runs on initial page load
  initTOC();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", initTOC);
</script>
